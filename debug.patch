diff --git a/pkg/virt-handler/hotplug-disk/mount.go b/pkg/virt-handler/hotplug-disk/mount.go
index 98635ac25..d4f4e70be 100644
--- a/pkg/virt-handler/hotplug-disk/mount.go
+++ b/pkg/virt-handler/hotplug-disk/mount.go
@@ -307,16 +307,16 @@ func (m *volumeMounter) writePathToMountRecord(path string, vmi *v1.VirtualMachi
 }
 
 func (m *volumeMounter) mountHotplugVolume(vmi *v1.VirtualMachineInstance, volumeName string, sourceUID types.UID, record *vmiMountTargetRecord, mountDirectory bool) error {
-	logger := log.DefaultLogger()
-	logger.V(4).Infof("Hotplug check volume name: %s", volumeName)
+	logger := log.DefaultLogger().Object(vmi)
+	logger.Infof("Hotplug check volume name: %s", volumeName)
 	if sourceUID != types.UID("") {
 		if m.isBlockVolume(&vmi.Status, volumeName) {
-			logger.V(4).Infof("Mounting block volume: %s", volumeName)
+			logger.Infof("Mounting block volume: %s", volumeName)
 			if err := m.mountBlockHotplugVolume(vmi, volumeName, sourceUID, record); err != nil {
 				return fmt.Errorf("failed to mount block hotplug volume %s: %v", volumeName, err)
 			}
 		} else {
-			logger.V(4).Infof("Mounting file system volume: %s", volumeName)
+			logger.Infof("Mounting file system volume: %s", volumeName)
 			if err := m.mountFileSystemHotplugVolume(vmi, volumeName, sourceUID, record, mountDirectory); err != nil {
 				return fmt.Errorf("failed to mount filesystem hotplug volume %s: %v", volumeName, err)
 			}
@@ -531,13 +531,14 @@ func (m *volumeMounter) mountFileSystemHotplugVolume(vmi *v1.VirtualMachineInsta
 	}
 
 	isMounted, err := isMounted(target)
+	log.DefaultLogger().Infof("isMounted?: %v [err=%+v]", isMounted, err)
 	if err != nil {
 		return fmt.Errorf("failed to determine if %s is already mounted: %v", target, err)
 	}
 	if !isMounted {
 		sourcePath, err := m.getSourcePodFilePath(sourceUID, vmi, volume)
 		if err != nil {
-			log.DefaultLogger().V(3).Infof("Error getting source path: %v", err)
+			log.DefaultLogger().Infof("Error getting source path: %v", err)
 			// We are eating the error to avoid spamming the log with errors, it might take a while for the volume
 			// to get mounted on the node, and this will error until the volume is mounted.
 			return nil
@@ -554,7 +555,7 @@ func (m *volumeMounter) mountFileSystemHotplugVolume(vmi *v1.VirtualMachineInsta
 		if out, err := mountCommand(sourcePath, target); err != nil {
 			return fmt.Errorf("failed to bindmount hotplug volume source from %v to %v: %v : %v", sourcePath, target, string(out), err)
 		}
-		log.DefaultLogger().V(1).Infof("successfully mounted %v", volume)
+		log.DefaultLogger().Infof("successfully mounted %v", volume)
 	}
 
 	return m.ownershipManager.SetFileOwnership(target)
@@ -810,6 +811,8 @@ func (m *volumeMounter) UnmountAll(vmi *v1.VirtualMachineInstance) error {
 }
 
 func (m *volumeMounter) IsMounted(vmi *v1.VirtualMachineInstance, volume string, sourceUID types.UID) (bool, error) {
+	logger := log.DefaultLogger().Object(vmi)
+	logger.Infof("Hotplug IsMounted: %s", volume)
 	virtlauncherUID := m.findVirtlauncherUID(vmi)
 	if virtlauncherUID == "" {
 		// This is not the node the pod is running on.
@@ -818,37 +821,50 @@ func (m *volumeMounter) IsMounted(vmi *v1.VirtualMachineInstance, volume string,
 	targetPath, err := m.hotplugDiskManager.GetHotplugTargetPodPathOnHost(virtlauncherUID)
 	if err != nil {
 		if errors.Is(err, os.ErrNotExist) {
+			logger.Infof("Hotplug IsMounted: %s NOTEXIST", volume)
 			return false, nil
 		}
+		logger.Infof("Hotplug IsMounted: %v FAILED", err)
 		return false, err
 	}
 	if m.isBlockVolume(&vmi.Status, volume) {
 		deviceName, err := safepath.JoinNoFollow(targetPath, volume)
 		if err != nil {
 			if errors.Is(err, os.ErrNotExist) {
+				logger.Infof("Hotplug IsMounted: BLOCK %v NOTEXIST", targetPath)
 				return false, nil
 			}
+			logger.Infof("Hotplug IsMounted: BLOCK %+v FAILED", err)
 			return false, err
 		}
 		isBlockExists, _ := isBlockDevice(deviceName)
+		logger.Infof("Hotplug IsMounted: BLOCK %+v %+v", deviceName, isBlockExists)
 		return isBlockExists, nil
 	}
 	if m.isDirectoryMounted(&vmi.Status, volume) {
 		path, err := safepath.JoinNoFollow(targetPath, volume)
 		if err != nil {
 			if errors.Is(err, os.ErrNotExist) {
+				logger.Infof("Hotplug IsMounted: DIR %+v %+v NOTFOUND", targetPath, volume)
 				return false, nil
 			}
+			logger.Infof("Hotplug IsMounted: DIR %+v FAILED", err)
 			return false, err
 		}
+		exists, err := isMounted(path)
+		logger.Infof("Hotplug IsMounted: DIR %+v %+v, %+v", path, exists, err)
 		return isMounted(path)
 	}
 	path, err := safepath.JoinNoFollow(targetPath, fmt.Sprintf("%s.img", volume))
 	if err != nil {
 		if errors.Is(err, os.ErrNotExist) {
+			logger.Infof("Hotplug IsMounted: ELSE %+v %+v NOTFOUND", targetPath, volume)
 			return false, nil
 		}
+		logger.Infof("Hotplug IsMounted: ELSE %+v %+v %+v FAILED", targetPath, volume, err)
 		return false, err
 	}
-	return isMounted(path)
+	exists, err := isMounted(path)
+	logger.Infof("Hotplug IsMounted: ELSE %+v %+v %+v", path, exists, err)
+	return exists, err
 }
